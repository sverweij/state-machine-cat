[
  {
    "title": "no transitions: 0 states",
    "program": "",
    "ast": {
      "states": []
    }
  },
  {
    "title": "no transitions: 1 state",
    "program": "Áä∂ÊÖã;",
    "ast": {
      "states": [
        {
          "name": "Áä∂ÊÖã",
          "type": "regular"
        }
      ]
    }
  },
  {
    "title": "no transitions: 1 state with activities",
    "program": "—Å—Ç–∞—Ç—É—Å: bouncing baby!;",
    "ast": {
      "states": [
        {
          "name": "—Å—Ç–∞—Ç—É—Å",
          "type": "regular",
          "actions": [
            {
              "type": "activity",
              "body": "bouncing baby!"
            }
          ]
        }
      ]
    }
  },
  {
    "title": "no transitions: 1 state with activities and a note",
    "program": "# and this an note attached to state a   \nüí©: bouncing baby!; ",
    "ast": {
      "states": [
        {
          "name": "üí©",
          "type": "regular",
          "actions": [
            {
              "type": "activity",
              "body": "bouncing baby!"
            }
          ],
          "note": ["and this an note attached to state a"]
        }
      ]
    }
  },
  {
    "title": "no transitions: 1 state with activities and a note",
    "program": "# and this an note attached to state a   \n# consisting of two lines\nüí©: bouncing baby!; ",
    "ast": {
      "states": [
        {
          "name": "üí©",
          "type": "regular",
          "actions": [
            {
              "type": "activity",
              "body": "bouncing baby!"
            }
          ],
          "note": [
            "and this an note attached to state a",
            "consisting of two lines"
          ]
        }
      ]
    }
  },
  {
    "title": "no transitions: 1 state with a note",
    "program": "# and this an note attached to state a   \na; ",
    "ast": {
      "states": [
        {
          "name": "a",
          "type": "regular",
          "note": ["and this an note attached to state a"]
        }
      ]
    }
  },
  {
    "title": "no transitions: 1 state - declared with quotes",
    "program": "\"con;fused\";",
    "ast": {
      "states": [
        {
          "name": "con;fused",
          "type": "regular"
        }
      ]
    }
  },
  {
    "title": "no transitions: > 1 state",
    "program": "a, b, c;",
    "ast": {
      "states": [
        {
          "name": "a",
          "type": "regular"
        },
        {
          "name": "b",
          "type": "regular"
        },
        {
          "name": "c",
          "type": "regular"
        }
      ]
    }
  },
  {
    "title": "no transitions: > 1 state - activities and notes",
    "program": "# note attached to state a\n\n                  a: entry/ armWeapons()\nexit/ disarmWeapons(), b:entry/ lightsOn()   ,# –û—Ç–º–µ—Ç–∏–º, —á—Ç–æ –ø—Ä–∏–ª–∞–≥–∞–µ—Ç—Å—è –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é —Å\n                  c;",
    "ast": {
      "states": [
        {
          "name": "a",
          "type": "regular",
          "actions": [
            {
              "body": "armWeapons()",
              "type": "entry"
            },
            {
              "body": "disarmWeapons()",
              "type": "exit"
            }
          ],
          "note": ["note attached to state a"]
        },
        {
          "name": "b",
          "type": "regular",
          "actions": [
            {
              "body": "lightsOn()",
              "type": "entry"
            }
          ]
        },
        {
          "name": "c",
          "type": "regular",
          "note": ["–û—Ç–º–µ—Ç–∏–º, —á—Ç–æ –ø—Ä–∏–ª–∞–≥–∞–µ—Ç—Å—è –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é —Å"]
        }
      ]
    }
  },
  {
    "title": "no transitions: > 1 state - activities and multiple note lines",
    "program": "# note attached to state a\n    # second line\n\n\n                  a: entry/ armWeapons()\nexit/ disarmWeapons(), b:entry/ lightsOn()   ,# –û—Ç–º–µ—Ç–∏–º, —á—Ç–æ –ø—Ä–∏–ª–∞–≥–∞–µ—Ç—Å—è –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é —Å\n                  c;",
    "ast": {
      "states": [
        {
          "name": "a",
          "type": "regular",
          "actions": [
            {
              "body": "armWeapons()",
              "type": "entry"
            },
            {
              "body": "disarmWeapons()",
              "type": "exit"
            }
          ],
          "note": ["note attached to state a", "second line"]
        },
        {
          "name": "b",
          "type": "regular",
          "actions": [
            {
              "body": "lightsOn()",
              "type": "entry"
            }
          ]
        },
        {
          "name": "c",
          "type": "regular",
          "note": ["–û—Ç–º–µ—Ç–∏–º, —á—Ç–æ –ø—Ä–∏–ª–∞–≥–∞–µ—Ç—Å—è –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é —Å"]
        }
      ]
    }
  },
  {
    "title": "no transitions: initial state",
    "program": "initial;",
    "ast": {
      "states": [
        {
          "name": "initial",
          "type": "initial"
        }
      ]
    }
  },
  {
    "title": "no transitions: final state",
    "program": "final;",
    "ast": {
      "states": [
        {
          "name": "final",
          "type": "final"
        }
      ]
    }
  },
  {
    "title": "no transitions: minimal choice",
    "program": "^;",
    "ast": {
      "states": [
        {
          "name": "^",
          "type": "choice"
        }
      ]
    }
  },
  {
    "title": "no transitions: normal choice",
    "program": "^ahooga;",
    "ast": {
      "states": [
        {
          "name": "^ahooga",
          "type": "choice"
        }
      ]
    }
  },
  {
    "title": "no transitions: quoted choice",
    "program": "\"^this is a choice\";",
    "ast": {
      "states": [
        {
          "name": "^this is a choice",
          "type": "choice"
        }
      ]
    }
  },
  {
    "title": "no transitions: minimal fork/ join",
    "program": "];",
    "ast": {
      "states": [
        {
          "name": "]",
          "type": "junction"
        }
      ]
    }
  },
  {
    "title": "no transitions: normal choice",
    "program": "]fork;",
    "ast": {
      "states": [
        {
          "name": "]fork",
          "type": "junction"
        }
      ]
    }
  },
  {
    "title": "no transitions: quoted choice",
    "program": "\"]a fork or a join\";",
    "ast": {
      "states": [
        {
          "name": "]a fork or a join",
          "type": "junction"
        }
      ]
    }
  },
  {
    "title": "no transitions: duplicate entities get uniq'd (making sure the last one declared stays on)",
    "program": "# note for a - not remembered\na: first a, b: yo!, a: second a;",
    "ast": {
      "states": [
        {
          "name": "a",
          "actions": [
            {
              "type": "activity",
              "body": "second a"
            }
          ],
          "type": "regular"
        },
        {
          "name": "b",
          "actions": [
            {
              "type": "activity",
              "body": "yo!"
            }
          ],
          "type": "regular"
        }
      ]
    }
  }
]
