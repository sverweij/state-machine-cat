#!/usr/bin/env node
const program     = require("commander");
const semver      = require("semver");
const $package    = require("../package.json");

/* istanbul ignore if  */
if (!semver.satisfies(process.versions.node, $package.engines.node)) {
    process.stderr.write(`\nERROR: your node version (${process.versions.node}) is not recent enough.\n`);
    process.stderr.write(`       state-machine-cat is supported on node ${$package.engines.node}\n\n`);

    /* eslint no-process-exit: 0 */
    process.exit(-1);
}

const normalizations = require("../src/cli/normalizations");
const validations    = require("../src/cli/validations");
const actions        = require("../src/cli/actions");

function presentError(e) {
    process.stderr.write(actions.formatError(e));

    /* eslint no-process-exit:0 */
    process.exit(1);
}

try {
    program
        .version($package.version)
        .option(
            "-T --output-type <type>",
            `${validations.validOutputTypeRE}`,
            validations.validOutputType,
            `${validations.defaultOutputType}`
        ).option(
            "-I --input-type <type>",
            `${validations.validInputTypeRE}`,
            validations.validInputType,
            `${validations.defaultInputType}`
        ).option(
            "-E --engine <type>",
            `${validations.validEngineRE}`,
            validations.validEngine,
            `${validations.defaultEngine}`
        ).option(
            "-d --direction <dir>",
            `${validations.validDirectionRE}`,
            validations.validDirection,
            `${validations.defaultDirection}`
        ).option(
            "-o --output-to <file>",
            "File to write to. use - for stdout."
        ).option(
            "-l --license",
            "Display license and exit",
            () => {
                process.stdout.write(actions.LICENSE);
                process.exit(0);
            }
        ).arguments(
            "[infile]"
        ).parse(
            process.argv
        );
    validations.validateArguments(
        normalizations.normalize(program.args[0], program)
    )
        .then(actions.transform)
        .catch(presentError);
} catch (e) {
    presentError(e);
}

/*
 This file is part of state-machine-cat.

 smcat is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

 smcat is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with smcat.  If not, see <http://www.gnu.org/licenses/>.
 */
