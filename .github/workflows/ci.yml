name: install, lint, test

on:
  push:
    branches: [master, develop]
  workflow_dispatch:
  pull_request:
    branches: [develop]

env:
  NODE_LATEST: 18.x
  CI: true

defaults:
  run:
    shell: bash

jobs:
  check-linux:
    strategy:
      fail-fast: false
      matrix:
        # node-version: [14.x, 16.x, 18.x]
        node-version: [18.x]
        platform: [ubuntu-latest]

    runs-on: ${{matrix.platform}}

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 2
      - uses: actions/setup-node@v3
        with:
          node-version: ${{matrix.node-version}}
      - uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{matrix.node-version}}@${{matrix.platform}}-build-${{hashFiles('package.json')}}
          restore-keys: |
            ${{matrix.node-version}}@${{matrix.platform}}-build-
      - uses: google/wireit@setup-github-actions-caching/v1
      - name: install
        run: |
          npm install
          apt-fast --assume-yes install graphviz
      - name: lint (on node ${{env.NODE_LATEST}} only)
        if: matrix.node-version == env.NODE_LATEST
        run: |
          npm run depcruise
          npm run lint
      - name: on pushes to the default branch emit full depcruise results to step summary
        if: always() && matrix.node-version == env.NODE_LATEST && github.event_name == 'push' && github.ref_name == github.event.repository.default_branch
        run: |
          npm run depcruise:github-actions:markdown
          npm run depcruise:github-actions:mermaid
      - name: on pull requests emit depcruise results + diff graph to step summary
        if: always() && matrix.node-version == env.NODE_LATEST && github.event_name == 'pull_request' && github.ref_name != github.event.repository.default_branch
        run: |
          npm run depcruise:github-actions:markdown
          export SHA=${{github.event.pull_request.base.sha}}
          npm run depcruise:github-actions:mermaid:diff
      - name: test (on node != ${{env.NODE_LATEST}} only)
        if: matrix.node-version != env.NODE_LATEST
        run: npm test
      - name: test coverage (on node ${{env.NODE_LATEST}} only)
        if: matrix.node-version == env.NODE_LATEST
        run: npm run test:cover
      - name: report coverage to code climate (on node ${{env.NODE_LATEST}} only)
        if: matrix.node-version == env.NODE_LATEST
        uses: paambaati/codeclimate-action@v3.0.0
        env:
          CC_TEST_REPORTER_ID: ${{ secrets.CODE_CLIMATE_TEST_COVERAGE_ID }}

  # Running on macos is quite slow on GHA (sometimes takes more than the linux
  # matrix AND the dependent codeql flow). It also doesn't really add much
  # a.c.t. running on linux - so disabling for now.
  #
  # check-macos:
  #   strategy:
  #     fail-fast: false
  #   env:
  #     PLATFORM: macos-latest
  #   runs-on: macos-latest

  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: actions/setup-node@v3
  #       with:
  #         node-version: ${{env.NODE_LATEST}}
  #     - uses: actions/cache@v3
  #       with:
  #         path: node_modules
  #         key: ${{env.NODE_LATEST}}@${{env.PLATFORM}}-build-${{hashFiles('package.json')}}
  #         restore-keys: ${{env.NODE_LATEST}}@${{env.PLATFORM}}-build-
  #     - uses: google/wireit@setup-github-actions-caching/v1
  #     - name: install
  #       run: |
  #         npm install
  #         brew install graphviz
  #     - run: npm run test:cover

  # check-windows:
  #   strategy:
  #     fail-fast: false
  #   env:
  #     PLATFORM: windows-latest
  #   runs-on: windows-latest

  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: actions/setup-node@v3
  #       with:
  #         node-version: ${{env.NODE_LATEST}}
  #     - uses: actions/cache@v3
  #       with:
  #         path: node_modules
  #         key: ${{matrix.node-version}}@${{matrix.platform}}-build-${{hashFiles('package.json')}}
  #         restore-keys: |
  #           ${{matrix.node-version}}@${{matrix.platform}}-build-
  #     - uses: google/wireit@setup-github-actions-caching/v1
  #     - run: npm install
  #     - run: npm test

  # codeql:
  #   name: CodeQL
  #   needs: [check-linux]
  #   runs-on: ubuntu-latest
  #   permissions:
  #     actions: read
  #     contents: read
  #     security-events: write

  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: github/codeql-action/init@v2
  #       with:
  #         languages: "javascript"
  #         # If you wish to specify custom queries, you can do so here or in a config file.
  #         # By default, queries listed here will override any specified in a config file.
  #         # Prefix the list here with "+" to use these queries and those in the config file.

  #         # Details on CodeQL's query packs refer to : https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs
  #         # queries: security-extended,security-and-quality
  #     - uses: github/codeql-action/analyze@v2
